pipeline {
    agent any

    environment {
        PROJECT_ID = 'mentorship-419620'
        CLUSTER_NAME = 'gmc'
        CLUSTER_REGION = 'us-central1-a'
        // SERVICE_ACCOUNT_KEY = credentials('gcp_service_account')
        SERVICE_ACCOUNT_KEY = credentials('gcp_key')
    }

    stages {
        stage('Clone'){
            steps{
                git branch: 'main', url: 'https://github.com/Aymen-Ben-Taieb/jenkins-pipeline.git'
        
            }
        }
        stage('*Build*') {
            steps {
                echo "Building the Maven project and Docker image"
                sh '''
                    docker build -t aymenbentaieb/myappfrontend:1.0.0 -f src/frontend/Dockerfile src/frontend
                    docker build -t aymenbentaieb/myappbackend:1.0.0 -f src/backend/Dockerfile src/backend
                '''
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_id', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh "docker login --username=$USERNAME --password=$PASSWORD"
                    }
                    sh "docker push aymenbentaieb/myappfrontend:1.0.0"
                    sh "docker push aymenbentaieb/myappbackend:1.0.0"

                }
                
            }
        }
        stage('Deploy to GKE') {
            agent { 
                docker { 
                    image 'gcloud:1.0' 
                    args '-u root'
                } 
            }
             steps {
                script {
                    git branch: 'main', url: 'https://github.com/Aymen-Ben-Taieb/jenkins-pipeline.git'
                    sh '''
                    echo ${SERVICE_ACCOUNT_KEY} | base64 -d > xx.json
                    export CLOUDSDK_CONFIG=${CLOUDSDK_CONFIG}
                    gcloud auth activate-service-account --key-file=xx.json
                    gcloud config set account $(gcloud auth list --filter=status:ACTIVE --format='value(account)')
                    gcloud config set project ${PROJECT_ID}
                    gcloud container clusters get-credentials ${CLUSTER_NAME} --region ${CLUSTER_REGION}
                    
                    
                    
                    '''
                    sh '''
                    KUBECONFIG=/root/.kube/config kubectl apply -f kubernetes_manfiest/ --namespace aymen
                    '''
                    retry(3) {
                        // Retry up to 3 times
                        sh '''
                        PUBLIC_IP=$(kubectl get svc frontendaymen -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')
                        if [ -z "$PUBLIC_IP" ]; then
                            echo "Public IP not ready, retrying..."
                            exit 1
                        fi
                        '''
                    }

                }
            }
        }
    }

    post {
        always {
            // Clean up the workspace after the build
            cleanWs()
        }
    }
}