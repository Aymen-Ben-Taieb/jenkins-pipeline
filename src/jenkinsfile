pipeline {
    //agent {label 'local'}

    stages {
        stage('Clone Repository') {
            steps {
                echo "Cloning repository"
            }
        }
        stage('*Build*') {
            steps {
                echo "Building the Maven project and Docker image"
                sh '''
                    mvn install 
                    docker build -t myapp . 
                    docker tag myapp aymenbentaieb/myapp:1.0.0
                '''
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_id', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh "docker login --username=$USERNAME --password=$PASSWORD"
                    }
                    sh "docker push aymenbentaieb/myapp:1.0.0"
                }
                
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'sonar_id', variable: 'SECRET')]) { 
                    env.SONAR_LOGIN = SECRET
                }}
                echo "Running SonarQube analysis" 
                sh '''
                    mvn clean install sonar:sonar \
                    -Dsonar.login=${SONAR_LOGIN} \
                    -Dsonar.host.url=http://localhost:9000 \
                    -Dsonar.projectKey=backend \
                    -Dsonar.projectName=backend \
                    -Dsonar.verbose=true 
                '''
            }
              }

              stage('Junit Test') {
                     steps {
                         script {
                                sh 'mvn test'

                }
            }
        }      

        stage('Publish to Nexus') {
                     steps {
                         script {
                                sh 'mvn deploy -e -DskipTests'
                                echo 'Publish to Nexus'
                                }
                                
                

            }
        }
        stage('Docker Compose') {
                     steps {
                         script {
                                sh 'docker compose up -d'
                                sh 'docker ps -aq | xargs docker start'
                }
            }
        } 

               }
    //            post {
    // // only triggered when blue or green sign
    // success {
    //     slackSend(channel: 'devops', color: 'good', message: ":white_check_mark: Build number ${BUILD_NUMBER} ended with SUCCESS aymen")
    // }
    // // triggered when red sign
    // failure {
    //     slackSend(channel: 'devops', color: 'RED', message: ":red_circle:  Build number ${BUILD_NUMBER} FAILED aymen") }
    // }
}