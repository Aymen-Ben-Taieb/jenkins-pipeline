"use strict";(self.webpackChunkremote_dev_env=self.webpackChunkremote_dev_env||[]).push([[7308],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},y=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),y=a,m=p["".concat(s,".").concat(y)]||p[y]||k[y]||r;return n?o.createElement(m,i(i({ref:t},u),{},{components:n})):o.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}y.displayName="MDXCreateElement"},4943:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>k,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_position:3},i="Running Ansible Playbook with Dynamic Inventory",l={unversionedId:"Configuration Management/Ansible",id:"Configuration Management/Ansible",title:"Running Ansible Playbook with Dynamic Inventory",description:"This documentation provides a step-by-step guide on how to run an Ansible playbook with dynamic inventory on Google Cloud Platform (GCP). By the end of this guide, you should be able to transfer an SSH public key to workstations using bash scripts and run an Ansible playbook on GCP instances.",source:"@site/docs/Configuration Management/Ansible.md",sourceDirName:"Configuration Management",slug:"/Configuration Management/Ansible",permalink:"/docs/Configuration Management/Ansible",draft:!1,editUrl:"https://github.com/Chamssiddine/remote-development-environment/docs/Configuration Management/Ansible.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installing AWX",permalink:"/docs/Configuration Management/Installing AWX"},next:{title:"Configuring AWX",permalink:"/docs/Configuration Management/Configuring AWX"}},s={},c=[{value:"Transferring SSH Public Key to Workstations Using Bash Scripts",id:"transferring-ssh-public-key-to-workstations-using-bash-scripts",level:2},{value:"Running the ansible Playbook using Dynamic Inventory",id:"running-the-ansible-playbook-using-dynamic-inventory",level:2},{value:"1. Create service account",id:"1-create-service-account",level:3},{value:"List the service accounts to see the service account email created",id:"list-the-service-accounts-to-see-the-service-account-email-created",level:3},{value:"Add the role to your service account email",id:"add-the-role-to-your-service-account-email",level:3},{value:"2. Export the service account key json file",id:"2-export-the-service-account-key-json-file",level:3},{value:"3. Create the dynamic inventory file",id:"3-create-the-dynamic-inventory-file",level:3},{value:"4. Run your playbook",id:"4-run-your-playbook",level:3}],u={toc:c},p="wrapper";function k(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"running-ansible-playbook-with-dynamic-inventory"},"Running Ansible Playbook with Dynamic Inventory"),(0,a.kt)("p",null,"This documentation provides a step-by-step guide on how to run an Ansible playbook with dynamic inventory on Google Cloud Platform (GCP). By the end of this guide, you should be able to transfer an SSH public key to workstations using bash scripts and run an Ansible playbook on GCP instances."),(0,a.kt)("h2",{id:"transferring-ssh-public-key-to-workstations-using-bash-scripts"},"Transferring SSH Public Key to Workstations Using Bash Scripts"),(0,a.kt)("p",null,"To transfer an SSH public key to workstations, follow these steps:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd scripts\n\n")),(0,a.kt)("p",null,"this is the folders we need:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 ansible_playbook\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u251c\u2500\u2500 gcp.yml\n\u2502   \u251c\u2500\u2500 docker_playbook.yml\n\u2502   \u251c\u2500\u2500 packages_playbook.yml\n\u2502   \u2514\u2500\u2500 start_ansible_playbook.bash\n\u2514\u2500\u2500 ssh\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 put_here_your_ssh_key_to_send.bash\n    \u251c\u2500\u2500 remove_knowhost.bash\n    \u2514\u2500\u2500 ssh_to_workstation.bash\n")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Remove any old known host to prevent conflicts by running the following command:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"}," $ rm ~/.ssh/know_hosts\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Transfer SSH Public Key to Workstations"),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"IMPORTANT"),": Choose the method that suits you:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"   a. GCP Metadata\n\n   b. Send machine's public key to GCP instances\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Prepare the file to send to GCP instance by creating a new directory using the following command:"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"}," $ mkdir ~/.ssh/auth_keys\n")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Add the public key to the authorized_keys file using the following command:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"}," $ echo ~/.ssh/<publickey.pub> > ~/.ssh/auth_keys/authorized_keys\n")),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},"Run the following script to transfer the public key to all workstations:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"}," $ bash send_publickey_to_workstation.bash\n")),(0,a.kt)("h2",{id:"running-the-ansible-playbook-using-dynamic-inventory"},"Running the ansible Playbook using Dynamic Inventory"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"General Steps")),(0,a.kt)("blockquote",null,(0,a.kt)("ol",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ol"},"Create a service account."))),(0,a.kt)("blockquote",null,(0,a.kt)("ol",{parentName:"blockquote",start:2},(0,a.kt)("li",{parentName:"ol"},"Get the credentials JSON file."))),(0,a.kt)("blockquote",null,(0,a.kt)("ol",{parentName:"blockquote",start:3},(0,a.kt)("li",{parentName:"ol"},"Create the dynamic inventory file."))),(0,a.kt)("blockquote",null,(0,a.kt)("ol",{parentName:"blockquote",start:4},(0,a.kt)("li",{parentName:"ol"},"Run your playbook."))),(0,a.kt)("h3",{id:"1-create-service-account"},"1. Create service account"),(0,a.kt)("p",null,"To create a service account, run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},' $ gcloud iam service-accounts create ansibledyinv --display-name "ansibledyinv"\n')),(0,a.kt)("h3",{id:"list-the-service-accounts-to-see-the-service-account-email-created"},"List the service accounts to see the service account email created"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"}," $ gcloud iam service-accounts list\n")),(0,a.kt)("h3",{id:"add-the-role-to-your-service-account-email"},"Add the role to your service account email"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},' $ gcloud projects add-iam-policy-binding <PROJECT_ID> --member "serviceAccount:<SERVICE_ACCOUNT_EMAIL>" --role "roles/compute.instanceAdmin.v1"\n')),(0,a.kt)("h3",{id:"2-export-the-service-account-key-json-file"},"2. Export the service account key json file"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"$ gcloud iam service-accounts keys create /opt/ansible/inventory/service-account.json --iam-account <SERVICE_ACCOUNT_EMAIL>\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"3-create-the-dynamic-inventory-file"},"3. Create the dynamic inventory file"),(0,a.kt)("p",null,"To create the dynamic inventory file, navigate to the ansible_playbook directory and create a new file called gcp.yml with the following contents:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"plugin: gcp_compute\nzones: # populate inventory with instances in these regions\n  - europe-west9-a\nprojects:\n  - <PROJECT_ID>\nauth_kind: serviceaccount\nservice_account_file: /opt/ansible/inventory/service-account.json\ngroups:\n  workstation_instances:\n")),(0,a.kt)("p",null,"You can modify it according to your preferences, in short we will target the vm in a specific zone. "),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"4-run-your-playbook"},"4. Run your playbook"),(0,a.kt)("p",null,"Choose the playbook you want to run. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    A. Installing Docker.\n    B. Installing multiple tools for our Developers.\n")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Run the playbook using the following command:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"$ ansible-playbook --user=<gcp account name> --private-key=~/.ssh/publickey.pub -i gcp.yml ThePlayBook.yml\n")),(0,a.kt)("p",null,"Replace <gcp_account_name> with your GCP account name, and ThePlayBook.yml with the name of the playbook you want to run (e.g., docker_playbook.yml or packages_playbook.yml)."),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"IMPORTANT"),"\nMake sure to replace "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"  I. <PROJECT_ID> with your actual GCP project ID\n II. <SERVICE_ACCOUNT_EMAIL> with the service account email you obtained\nIII. <publickey.pub> with the actual filename of your SSH public key.\n")),(0,a.kt)("p",null,"By following these steps, you should be able to transfer the SSH public key to workstations and run your Ansible playbook using dynamic inventory on GCP instances."))}k.isMDXComponent=!0}}]);