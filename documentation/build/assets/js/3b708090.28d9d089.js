"use strict";(self.webpackChunkremote_dev_env=self.webpackChunkremote_dev_env||[]).push([[2606],{3905:(e,t,l)=>{l.d(t,{Zo:()=>p,kt:()=>m});var a=l(7294);function n(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function r(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,a)}return l}function o(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?r(Object(l),!0).forEach((function(t){n(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):r(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function s(e,t){if(null==e)return{};var l,a,n=function(e,t){if(null==e)return{};var l,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)l=r[a],t.indexOf(l)>=0||(n[l]=e[l]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)l=r[a],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(n[l]=e[l])}return n}var u=a.createContext({}),i=function(e){var t=a.useContext(u),l=t;return e&&(l="function"==typeof e?e(t):o(o({},t),e)),l},p=function(e){var t=i(e.components);return a.createElement(u.Provider,{value:t},e.children)},c="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var l=e.components,n=e.mdxType,r=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=i(l),d=n,m=c["".concat(u,".").concat(d)]||c[d]||k[d]||r;return l?a.createElement(m,o(o({ref:t},p),{},{components:l})):a.createElement(m,o({ref:t},p))}));function m(e,t){var l=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=l.length,o=new Array(r);o[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[c]="string"==typeof e?e:n,o[1]=s;for(var i=2;i<r;i++)o[i]=l[i];return a.createElement.apply(null,o)}return a.createElement.apply(null,l)}d.displayName="MDXCreateElement"},4802:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>k,frontMatter:()=>r,metadata:()=>s,toc:()=>i});var a=l(7462),n=(l(7294),l(3905));const r={sidebar_position:3},o="Configure Vault Cluster",s={unversionedId:"Secrets/Configure Vault",id:"Secrets/Configure Vault",title:"Configure Vault Cluster",description:"Step 1: Initialize and unseal one Vault pod",source:"@site/docs/Secrets/Configure Vault.md",sourceDirName:"Secrets",slug:"/Secrets/Configure Vault",permalink:"/docs/Secrets/Configure Vault",draft:!1,editUrl:"https://github.com/Chamssiddine/remote-development-environment/docs/Secrets/Configure Vault.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Install Vault",permalink:"/docs/Secrets/Install Vault"},next:{title:"Integrate Vault with helm",permalink:"/docs/Secrets/Integrate Vault with helm"}},u={},i=[{value:"Step 1: Initialize and unseal one Vault pod",id:"step-1-initialize-and-unseal-one-vault-pod",level:2},{value:"Step 2: Join the other Vaults to the Vault cluster",id:"step-2-join-the-other-vaults-to-the-vault-cluster",level:3},{value:"Verify Cluster Status",id:"verify-cluster-status",level:2}],p={toc:i},c="wrapper";function k(e){let{components:t,...l}=e;return(0,n.kt)(c,(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"configure-vault-cluster"},"Configure Vault Cluster"),(0,n.kt)("h2",{id:"step-1-initialize-and-unseal-one-vault-pod"},"Step 1: Initialize and unseal one Vault pod"),(0,n.kt)("p",null,"To start, Vault needs to be initialized and unsealed. Follow these steps:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Initialize Vault with one key share and one key threshold:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl exec -n secrets vault-0 -- vault operator init -key-shares=1 -key-threshold=1 -format=json > cluster-keys.json\n")),(0,n.kt)("ol",{start:2},(0,n.kt)("li",{parentName:"ol"},"Display the unseal key found in ",(0,n.kt)("inlineCode",{parentName:"li"},"cluster-keys.json"),":")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},'cat cluster-keys.json | jq -r ".unseal_keys_b64[]"\n')),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},"Create a variable named ",(0,n.kt)("inlineCode",{parentName:"li"},"VAULT_UNSEAL_KEY")," to capture the Vault unseal key:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},'VAULT_UNSEAL_KEY=$(cat cluster-keys.json | jq -r ".unseal_keys_b64[]")\n')),(0,n.kt)("ol",{start:4},(0,n.kt)("li",{parentName:"ol"},"Unseal Vault running on the ",(0,n.kt)("inlineCode",{parentName:"li"},"vault-0")," pod:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl exec -n secrets vault-0 -- vault operator unseal $VAULT_UNSEAL_KEY\n")),(0,n.kt)("h3",{id:"step-2-join-the-other-vaults-to-the-vault-cluster"},"Step 2: Join the other Vaults to the Vault cluster"),(0,n.kt)("p",null,"To create a Vault HA cluster, you need to join the other Vaults to the cluster. Here's how:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Display the root token found in ",(0,n.kt)("inlineCode",{parentName:"li"},"cluster-keys.json"),":")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},'cat cluster-keys.json | jq -r ".root_token"\n')),(0,n.kt)("ol",{start:2},(0,n.kt)("li",{parentName:"ol"},"Create a variable named ",(0,n.kt)("inlineCode",{parentName:"li"},"CLUSTER_ROOT_TOKEN")," to capture the Vault root token:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},'CLUSTER_ROOT_TOKEN=$(cat cluster-keys.json | jq -r ".root_token")\n')),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},"Login with the root token on the ",(0,n.kt)("inlineCode",{parentName:"li"},"vault-0")," pod:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl exec -n secrets vault-0 -- vault login $CLUSTER_ROOT_TOKEN\n")),(0,n.kt)("ol",{start:4},(0,n.kt)("li",{parentName:"ol"},"List all the nodes within the Vault cluster for the ",(0,n.kt)("inlineCode",{parentName:"li"},"vault-0")," pod:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl exec -n secrets vault-0 -- vault operator raft list-peers\n")),(0,n.kt)("hr",null),(0,n.kt)("ol",{start:5},(0,n.kt)("li",{parentName:"ol"},"Join the Vault server on ",(0,n.kt)("inlineCode",{parentName:"li"},"vault-1")," to the Vault cluster:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl exec -n secrets vault-1 -- vault operator raft join http://vault-0.vault-internal:8200\n")),(0,n.kt)("ol",{start:6},(0,n.kt)("li",{parentName:"ol"},"Unseal the Vault server on ",(0,n.kt)("inlineCode",{parentName:"li"},"vault-1")," with the unseal key:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl exec -n secrets vault-1 -- vault operator unseal $VAULT_UNSEAL_KEY\n")),(0,n.kt)("hr",null),(0,n.kt)("ol",{start:7},(0,n.kt)("li",{parentName:"ol"},"Join the Vault server on ",(0,n.kt)("inlineCode",{parentName:"li"},"vault-2")," to the Vault cluster:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl exec -n secrets vault-2 -- vault operator raft join http://vault-0.vault-internal:8200\n")),(0,n.kt)("ol",{start:8},(0,n.kt)("li",{parentName:"ol"},"Unseal the Vault server on ",(0,n.kt)("inlineCode",{parentName:"li"},"vault-2")," with the unseal key:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl exec -n secrets vault-2 -- vault operator unseal $VAULT_UNSEAL_KEY\n")),(0,n.kt)("hr",null),(0,n.kt)("ol",{start:9},(0,n.kt)("li",{parentName:"ol"},"List all the nodes within the Vault cluster for the ",(0,n.kt)("inlineCode",{parentName:"li"},"vault-0")," pod:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl exec -n secrets vault-0 -- vault operator raft list-peers\n")),(0,n.kt)("h2",{id:"verify-cluster-status"},"Verify Cluster Status"),(0,n.kt)("p",null,"To ensure the Vault cluster is properly set up, follow these steps:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Get all the pods within the default namespace:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get pods -n secrets\n")),(0,n.kt)("ol",{start:2},(0,n.kt)("li",{parentName:"ol"},"Check that the ",(0,n.kt)("inlineCode",{parentName:"li"},"vault-0"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"vault-1"),", and ",(0,n.kt)("inlineCode",{parentName:"li"},"vault-2")," pods are running and ready (1/1).")),(0,n.kt)("hr",null))}k.isMDXComponent=!0}}]);